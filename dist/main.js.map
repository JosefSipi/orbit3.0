{"version":3,"sources":["webpack://orbit3.0/./src/scripts/cube.js","webpack://orbit3.0/./src/index.js"],"names":["Point3D","x","y","z","this","Point2D","cube","size","call","vertices","faces","context","document","querySelector","getContext","loop","window","requestAnimationFrame","canvasGridEle","body","offsetLeft","clientLeft","offsetTop","clientTop","addEventListener","event","offsetHeight","height","documentElement","clientHeight","width","canvas","strokeStyle","points3d","changeX","changeY","points2d","Array","length","index","getElementById","p","project","beginPath","moveTo","lineTo","closePath","stroke","face"],"mappings":"yBACA,IAAMA,EAAU,SAASC,EAAGC,EAAGC,GAAKC,KAAKH,EAAIA,EAAGG,KAAKF,EAAIA,EAAGE,KAAKD,EAAIA,GAExDE,EAAU,SAASJ,EAAGC,GAAIE,KAAKH,EAAIA,EAAGG,KAAKF,EAAIA,GCCxDI,EAAO,IDCS,SAASL,EAAGC,EAAGC,EAAGI,GAElCP,EAAQQ,KAAKJ,KCHI,EAAG,EDGKD,GAEjB,GAERC,KAAKK,SAAW,CACZ,IAAIT,GAAQC,IAAUC,GAAUC,KAChC,IAAIH,EAAQC,IAAUC,GAAUC,KAChC,IAAIH,EAAQC,GAAUC,GAAUC,KAChC,IAAIH,GAAQC,GAAUC,GAAUC,KAChC,IAAIH,GAAQC,IAAUC,GAAUC,KAChC,IAAIH,EAAQC,IAAUC,GAAUC,KAChC,IAAIH,EAAQC,GAAUC,GAAUC,KAChC,IAAIH,GAAQC,GAAUC,GAAUC,MAGpCC,KAAKM,MAAQ,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,IClBvF,CAAU,EAAG,EAAG,IAAK,KAE5BC,EAAUC,SAASC,cAAc,UAAUC,WAAW,OA+B1D,SAASC,IAELC,OAAOC,sBAAsBF,GAE7B,IAAIG,EAAgBN,SAASO,KAAKN,cAAc,gBACjCK,EAAcE,WAAaF,EAAcG,WAC1CH,EAAcI,UAAYJ,EAAcK,UACrCL,EAAcJ,WAAW,MAG1CI,EAAcM,iBAAiB,SAAS,SAASC,OAKjCP,EAAcQ,aAA9B,IACIC,EAASf,SAASgB,gBAAgBC,aAClCC,EAAQH,EAGZhB,EAAQoB,OAAOJ,OAASA,EACxBhB,EAAQoB,OAAOD,MAAQA,EAEvBnB,EAAQqB,YAAc,QAgBtB,IAAIvB,EAnER,SAAiBwB,EAAUH,EAAOH,EAAQO,EAASC,GAU/C,IARA,IAAIC,EAAW,IAAIC,MAAMJ,EAASK,QAQzBC,GAJc3B,SAAS4B,eAAe,eAAeV,MAI7CG,EAASK,OAAS,GAAGC,GAAS,IAAMA,EAAO,CAExD,IAAIE,EAAIR,EAASM,GAIbtC,EAAIwC,EAAExC,GAZK,IAYgBwC,EAAEtC,GAC7BD,EAAIuC,EAAEvC,GAbK,IAaeuC,EAAEtC,GAIhCiC,EAASG,GAAS,IAAIlC,EAAQJ,EAAGC,GAGrC,OAAOkC,EA2CQM,CAAQpC,EAAKG,UAI5BE,EAAQgC,YACRhC,EAAQiC,OAAO,IAAK,KACpBjC,EAAQkC,OAAO,IAAK,KACpBlC,EAAQmC,YACRnC,EAAQoC,SAER,IAAK,IAAIR,EAAQjC,EAAKI,MAAM4B,OAAS,EAAGC,GAAS,IAAMA,EAAO,CAC1D,IAAIS,EAAO1C,EAAKI,MAAM6B,GAEtB5B,EAAQgC,YACRhC,EAAQiC,OAAOnC,EAASuC,EAAK,IAAI/C,EAAGQ,EAASuC,EAAK,IAAI9C,GACtDS,EAAQkC,OAAOpC,EAASuC,EAAK,IAAI/C,EAAGQ,EAASuC,EAAK,IAAI9C,GACtDS,EAAQkC,OAAOpC,EAASuC,EAAK,IAAI/C,EAAGQ,EAASuC,EAAK,IAAI9C,GACtDS,EAAQkC,OAAOpC,EAASuC,EAAK,IAAI/C,EAAGQ,EAASuC,EAAK,IAAI9C,GACtDS,EAAQmC,YACRnC,EAAQoC,UAQhBhC,G","file":"main.js","sourcesContent":["\nconst Point3D = function(x, y, z) { this.x = x; this.y = y; this.z = z;};\n\nexport const Point2D = function(x, y) {this.x = x; this.y = y;};\n\nexport const Cube = function(x, y, z, size) {\n\n    Point3D.call(this, x, y, z);\n\n    size *= 0.5;\n\n    this.vertices = [\n        new Point3D(x - size, y - size, z - size),\n        new Point3D(x + size, y - size, z - size),\n        new Point3D(x + size, y + size, z - size),\n        new Point3D(x - size, y + size, z - size),\n        new Point3D(x - size, y - size, z + size),\n        new Point3D(x + size, y - size, z + size),\n        new Point3D(x + size, y + size, z + size),\n        new Point3D(x - size, y + size, z + size)\n    ];\n\n    this.faces = [[0, 1, 2, 3], [0, 4, 5, 1], [1, 5, 6, 2], [3, 2, 6, 7], [0, 3, 7, 4], [4, 7, 6, 5]];\n\n};\n\n\n// ---- need to create all the cubes on the canvas here -----\n","import './styles/index.scss';\nimport { Cube, Point2D } from './scripts/cube';\n\n\nvar cube = new Cube( 0, 0, 200, 100);\n\nvar context = document.querySelector('canvas').getContext('2d');\n\n\nfunction project(points3d, width, height, changeX, changeY) {\n// debugger\n    var points2d = new Array(points3d.length);\n\n    var focal_length = 200;\n\n    const canvasWidthNow = document.getElementById(\"canvas-grid\").width;\n\n    let cubeStep = (canvasWidthNow / 100);\n\n    for (let index = points3d.length - 1; index > -1; -- index) {\n\n        let p = points3d[index];\n// increase each iteration by 202\n        // let x = p.x * ( focal_length / p.z) + 68 + changeX;\n        // let y = p.y * ( focal_length /p.z) + 68 + changeY;\n        let x = p.x * ( focal_length / p.z);\n        let y = p.y * ( focal_length /p.z);\n        // let x = p.x * ( focal_length / p.z) + width * 0.05;\n        // let y = p.y * ( focal_length /p.z) + height * 0.05;\n\n        points2d[index] = new Point2D(x, y);\n    }\n\n    return points2d;\n}\n\n\nfunction loop(){\n\n    window.requestAnimationFrame(loop);\n    // debugger\n    var canvasGridEle = document.body.querySelector('.canvas-grid'),\n        gridLeft = canvasGridEle.offsetLeft + canvasGridEle.clientLeft,\n        gridTop = canvasGridEle.offsetTop + canvasGridEle.clientTop,\n        newContext = canvasGridEle.getContext('2d'),\n        elements = [];\n\n    canvasGridEle.addEventListener('click', function(event){\n        debugger\n    });\n\n\n    var eleHeight = canvasGridEle.offsetHeight;\n    var height = document.documentElement.clientHeight;\n    var width = height;\n    // var width = document.documentElement.clientWidth;\n\n    context.canvas.height = height;\n    context.canvas.width = width;\n\n    context.strokeStyle = 'black';\n\n// need to loop throught each cube\n\n// for (let changeX = 202; changeX < width; ++ changeX){\n//     for (let changeY = 202; changeX < width; ++ changeX){\n//         let cube =\n\n//     }\n// }\n\n    // with each cube we project we want to \n            // indicate whether it's selected or not\n            // it's position on the canvas\n\n    // --- this will be referencing and iterating through a hash if all cubes on screen ---\n    var vertices = project(cube.vertices, width, height);\n    // ---- -------- ------ \n    // debugger\n\n    context.beginPath();\n    context.moveTo(400, 400);\n    context.lineTo(313, 313);\n    context.closePath();\n    context.stroke();\n\n    for (let index = cube.faces.length - 1; index > -1; -- index) {\n        let face = cube.faces[index];\n        // debugger\n        context.beginPath();\n        context.moveTo(vertices[face[0]].x, vertices[face[0]].y);\n        context.lineTo(vertices[face[1]].x, vertices[face[1]].y);\n        context.lineTo(vertices[face[2]].x, vertices[face[2]].y);\n        context.lineTo(vertices[face[3]].x, vertices[face[3]].y);\n        context.closePath();\n        context.stroke();\n\n\n    }\n\n\n}\n\nloop();\n\n\n\n\n\n"],"sourceRoot":""}